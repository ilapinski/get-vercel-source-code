import { useRouter } from 'next/router'
import Head from 'next/head'
import Header from '@/components/Header'
import { useEffect, useState } from 'react'

export default  function Home() {
    const router = useRouter();
    const { slug } = router.query as { slug: string };
    const [matches, setMatches] = useState<Match[]>([]);
    const [error, setError] = useState<any>("");
    const [match, setMatch] = useState<Match | null>(null);
    const [loadingImage, setLoadingImage] = useState<boolean>(true);

    const getMatches = async (club_name: string) => {
        if(!club_name) return;

        const res = await fetch(`../api/matches?club_name=${club_name}`);
        const data = await res.json();
        if(data.error) setError(data.error);
        if(!data) return;
        setMatches(data);
        console.log(matches);
    }

    const downloadImage = async () => {
        if(!match) return;

        // get image by id from document (#image)
        const image = document.getElementById('image') as HTMLImageElement;
        console.log('img', image)
        if(!image) return;

        // create canvas and download it
        const canvas = document.createElement('canvas');
        canvas.width = image.naturalWidth; // use naturalWidth instead of clientWidth
        canvas.height = image.naturalHeight; // use naturalHeight instead of clientHeight
        const ctx = canvas.getContext('2d');
        if(!ctx) return;
        ctx.drawImage(image, 0, 0);
        const a = document.createElement('a');
        a.href = canvas.toDataURL('image/png');
        a.download = `${match.sharing_team} gegen ${match.away_team_name}.png`;
        a.click();

        console.log('downloaded image')
    }



    useEffect (() => {
        try {
            getMatches(slug);
         } catch (error: any) {
            setError(error);
            console.log(error);
         }
    }, [slug]);

    useEffect(() => {
        setLoadingImage(true);
    }, [match]);
    

    return (
    <>
        <Head>
        <title>Prematch - Content Library</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        </Head>
        <Header />
        <header className="bg-zinc-700 shadow">
            <div className="mx-auto max-w-4xl py-6 px-4 sm:px-6 lg:px-8">
            <h1 className="text-3xl font-bold tracking-tight text-white">{(match ? match.sharing_team + ' gegen ' + match.away_team_name : slug)}</h1>
            </div>
        </header>
        <main>
            <div className="mx-auto max-w-4xl py-6 sm:px-6 lg:px-8">
                {
                    // no match selected
                    !match ? (
                        <>
                            <div className="px-4 py-6 sm:px-0 bg-zinc-900 rounded-lg max-md:rounded-none">
                                <div className="mt-1 px-4">
                                    {
                                        error && (
                                            <div className='mt-5 p-4 bg-red-950 rounded-lg'>
                                                <span className='text-red-500'><b>Fehler</b></span><br/><span>{error.message}</span>
                                            </div>
                                        )
                                    }

                                    {
                                        (matches.length === 0 && !error) && (
                                            <>
                                                <div role="status" className='w-full'>
                                                    <svg aria-hidden="true" className="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-[#FFFF04] block mx-auto" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                                                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                                                    </svg>
                                                    <span className='text-gray-300 block mx-auto w-full text-center mt-3'>Template wird geladen...</span>
                                                </div>
                                            </>
                                        )
                                    }  
                                    {
                                        (matches.length > 0 && !error) && (
                                            <>
                                                Wähle eins der folgenden Spiele aus:
                                                {
                                                    !error && matches.length > 0 && matches.map((match, index) => (
                                                        // three columns
                                                        <div key={'match-' + index} className='mt-5 p-4 bg-zinc-800 rounded-lg flex items-center hover:bg-zinc-700 hover:transition-all cursor-pointer select-text' onClick={() => setMatch(match)}>
                                                            <div className='flex flex-col items-center w-1/3 text-center'>
                                                                <img src={match.home_team_logo} alt={match.sharing_team} className='w-10 h-10 object-contain rounded-full mb-2' />
                                                                {match.sharing_team}
                                                            </div>
                                                            <div className='w-1/3 text-center'>
                                                                <p className='text-[#999999]'>
                                                                    {match.match_start_day} - {match.match_start_time}
                                                                </p>
                                                            </div>
                                                            <div className='flex flex-col items-center w-1/3 text-center'>
                                                                <img src={match.away_team_logo} alt={match.away_team_name} className='w-10 h-10 object-contain rounded-full mb-2' />
                                                                {match.away_team_name}
                                                            </div>
                                                        </div>

                                                    ))
                                                }
                                            </>
                                        )
                                    }
                                </div>
                            </div>
                        </>
                    ) : (
                        <>
                            <div className="px-4 py-6 sm:px-0 bg-zinc-900 rounded-lg max-md:rounded-none">
                                <div className="mt-1 px-4">
                                    <button className="bg-zinc-800 py-2 px-10 rounded-lg hover:bg-zinc-700 hover:transition-all" onClick={() => setMatch(null)}>
                                        Zurück
                                    </button>
                                    <div className='mt-5 p-4 bg-zinc-800 rounded-lg flex items-center select-text' onClick={() => setMatch(match)}>
                                        <div className='flex flex-col items-center w-1/3 text-center'>
                                            <img src={match.home_team_logo} alt={match.sharing_team} className='w-10 h-10 object-contain rounded-full mb-2' />
                                            {match.sharing_team}
                                        </div>
                                        <div className='w-1/3 text-center'>
                                            <p className='text-[#999999]'>
                                                {match.match_start_day} - {match.match_start_time}
                                            </p>
                                        </div>
                                        <div className='flex flex-col items-center w-1/3 text-center'>
                                            <img src={match.away_team_logo} alt={match.away_team_name} className='w-10 h-10 object-contain rounded-full mb-2' />
                                            {match.away_team_name}
                                        </div>
                                    </div>
                                    {
                                        loadingImage ? (
                                            <>
                                                <div role="status" className='w-full'>
                                                    <svg aria-hidden="true" className="mt-7 w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-[#FFFF04] block mx-auto" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                        <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="currentColor"/>
                                                        <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentFill"/>
                                                    </svg>
                                                    <span className='text-gray-300 block mx-auto w-full text-center mt-3'>Vorlage wird geladen...</span>
                                                </div>
                                            </>
                                        ) : (
                                            <>
                                                <button className="display mx-auto mt-4 w-full max-w-sm px-4 py-2 border rounded-lg text-zinc-950 font-semibold bg-[#FFFF04] border-transparent block hover:bg-[#D9D900] hover:transition-all focus:bg-yellow-300  focus:outline-none focus:ring-2 focus:ring-[#FFFF04] focus:border-transparent max-md:w-full" onClick={() => downloadImage()}>Vorlage herunterladen</button>
                                            </>
                                        )
                                    }
                                    <div className='w-full mt-5 max-w-sm block mx-auto'>
                                        <img src={match.image} alt={match.sharing_team} crossOrigin="anonymous" className='w-full rounded-lg' onLoad={() => setLoadingImage(false)} id="image" />
                                    </div>
                                </div>
                            </div>
                        </>
                    )

                }
            {/* /End replace */}
            </div>
        </main>
    </>
    )
}

type Match = {
    away_team_logo: string;
    away_team_name: string;
    away_team_type: string;
    displayed_team: string;
    home_team_logo: string;
    home_team_type: string;
    id: number;
    image: string;
    match_start_at: string;
    match_start_day: string;
    match_start_time: string;
    match_time: string;
    sharing_team: string;
}